#!/usr/bin/env python3

import argparse
import itertools
import pathlib

from midout import gen
from midout.all_circuits import CONSTRUCTIONS, make_requested_surface_code


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--out_dir",
        type=str,
        required=True,
    )
    parser.add_argument("--distance", nargs='+', required=True, type=int)
    parser.add_argument("--noise_strength", nargs='+', required=True, type=float)
    parser.add_argument("--noise_model", nargs='+', required=True, choices=['SI1000', 'UniformDepolarizing'])
    parser.add_argument("--style", nargs='+', required=True, choices=sorted(CONSTRUCTIONS.keys()))
    parser.add_argument("--basis", nargs='+', required=True, choices=['X', 'Z'])
    parser.add_argument("--debug_out_dir", default=None, type=str)
    args = parser.parse_args()

    out_dir = pathlib.Path(args.out_dir)
    out_dir.mkdir(exist_ok=True, parents=True)
    debug_out_dir = None
    if args.debug_out_dir is not None:
        debug_out_dir = pathlib.Path(args.debug_out_dir)
        debug_out_dir.mkdir(exist_ok=True, parents=True)

    for d, p, noise_model_name, style, b in itertools.product(
            args.distance,
            args.noise_strength,
            args.noise_model,
            args.style,
            args.basis):
        r = 4*d

        if noise_model_name == "SI1000":
            noise_model = gen.NoiseModel.si1000(p)
        elif noise_model_name == "UniformDepolarizing":
            noise_model = gen.NoiseModel.uniform_depolarizing(p)
        else:
            raise NotImplementedError(f'{noise_model_name=}')

        _, circuit = make_requested_surface_code(
            distance=d,
            noise=noise_model,
            debug_out_dir=debug_out_dir,
            style=style,
            basis=b,
            rounds=r,
        )
        if style.split("-")[0] in ["GLIDING", "SLIDING"]:
            # these should have the same qubit count as wiggling, regardless of how far they move
            _, wiggling_equiv_circuit = make_requested_surface_code(
                distance=d,
                noise=noise_model,
                debug_out_dir=debug_out_dir,
                style=f"WIGGLING-{style.split('-')[1]}",
                basis=b,
                rounds=3,
            )
            q = wiggling_equiv_circuit.num_qubits
        else:
            q = circuit.num_qubits
        path = out_dir / f'r={r},d={d},p={p},noise={noise_model_name},b={b},style={style},q={q}.stim'
        with open(path, 'w') as f:
            print(circuit, file=f)
        print(f'wrote file://{path.absolute()}')


if __name__ == '__main__':
    main()
