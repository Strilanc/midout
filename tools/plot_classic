#!/usr/bin/env python3

import argparse
import functools
import sys
from typing import List, Callable, Any, Optional, Iterable

import sinter
from matplotlib import pyplot as plt

from midout.all_circuits import xz_piece_error_rate


def plot_error_rate(
        *,
        ax: 'plt.Axes',
        stats: 'Iterable[sinter.TaskStats]',
        x_func: Callable[['sinter.TaskStats'], Any],
        failure_units_per_shot_func: Callable[['sinter.TaskStats'], Any] = lambda _: 1,
        group_func: Callable[['sinter.TaskStats'], Any] = lambda _: None,
        highlight_max_likelihood_factor: Optional[float] = 1e3,
) -> None:
    if not (highlight_max_likelihood_factor >= 1):
        raise ValueError(f"not (highlight_max_likelihood_factor={highlight_max_likelihood_factor} >= 1)")

    curve_groups = sinter.group_by(stats, key=group_func)
    for k, curve_id in enumerate(sorted(curve_groups.keys(), key=sinter.better_sorted_str_terms)):
        this_group_stats = sorted(curve_groups[curve_id], key=x_func)

        xs = []
        ys = []
        xs_range = []
        ys_low = []
        ys_high = []
        for stat in this_group_stats:
            num_kept = stat.shots - stat.discards
            if num_kept == 0:
                continue
            x = float(x_func(stat))
            fit = sinter.fit_binomial(
                num_shots=num_kept,
                num_hits=stat.errors,
                max_likelihood_factor=highlight_max_likelihood_factor,
            )
            combo = stat.json_metadata['b'] == 'XZ'
            pieces = failure_units_per_shot_func(stat)
            cc = functools.partial(xz_piece_error_rate, pieces=pieces, combo=combo)
            if stat.errors:
                xs.append(x)
                ys.append(cc(fit.best))
            if highlight_max_likelihood_factor > 1:
                xs_range.append(x)
                ys_low.append(cc(fit.low))
                ys_high.append(cc(fit.high))

        markers = "ov*sp^<>+xXDd|" * 100
        kwargs = {'marker': markers[k]}
        if 'label' not in kwargs and curve_id is not None:
            kwargs['label'] = str(curve_id)
        ax.plot(xs, ys, **kwargs)
        if highlight_max_likelihood_factor > 1:
            if 'zorder' not in kwargs:
                kwargs['zorder'] = 0
            if 'alpha' not in kwargs:
                kwargs['alpha'] = 1
            kwargs['zorder'] -= 100
            kwargs['alpha'] *= 0.25
            if 'marker' in kwargs:
                del kwargs['marker']
            if 'linestyle' in kwargs:
                del kwargs['linestyle']
            if 'label' in kwargs:
                del kwargs['label']
            ax.fill_between(xs_range, ys_low, ys_high, **kwargs)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "stats",
        type=str,
    )
    parser.add_argument(
        "--show",
        action='store_true',
        default=False,
    )
    parser.add_argument(
        "--out",
        default=None,
        type=str,
    )
    parser.add_argument(
        "--basis",
        type=str,
        required=True,
    )
    parser.add_argument(
        "--style",
        type=str,
        required=True,
    )
    parser.add_argument(
        "--unit",
        choices=['round', 'quop', 'shot'],
        required=True,
    )
    args = parser.parse_args()
    if args.out is None and not args.show:
        raise ValueError("args.out is None and not args.show")

    stats: List[sinter.TaskStats] = sinter.stats_from_csv_files(args.stats)
    failure_unit_name = args.unit
    if failure_unit_name == 'round':
        failure_unit_func = lambda stat: stat.json_metadata['r']
    elif failure_unit_name == 'quop':
        failure_unit_func = lambda stat: stat.json_metadata['r'] / stat.json_metadata['d']
    elif failure_unit_name == 'shot':
        failure_unit_func = lambda _: 1
    else:
        raise NotImplementedError(failure_unit_name)

    stats = [stat for stat in stats if stat.json_metadata['style'] == args.style and stat.json_metadata['b'] == args.basis]
    if not stats:
        print(f"WARNING: No stats left after filtering style={args.style} basis={args.basis}. Skipping plot.", file=sys.stderr)
        return
    ax: plt.Axes
    fig: plt.Figure
    fig, ax = plt.subplots(1, 1)
    plot_error_rate(
        ax=ax,
        stats=stats,
        x_func=lambda stat: stat.json_metadata['p'],
        group_func=lambda stat: f'style={stat.json_metadata["style"]} d={stat.json_metadata["d"]}',
        failure_units_per_shot_func=failure_unit_func,
    )

    ax.set_title(f"{args.basis} Logical Error Rate per {failure_unit_name} vs Physical Error Rate for style={args.style}")
    ax.set_ylabel(f"{args.basis} Logical Error Rate per {failure_unit_name}")
    ax.set_xlabel("Physical Error Rate")
    ax.legend()
    ax.loglog()
    ax.set_yticks([b*10**-k for k in range(13)[::-1] for b in range(1, 10)], minor=True)
    ax.set_yticks([10**-k for k in range(13)[::-1]])
    ax.set_ylim(1e-12, 1e-0)
    ax.set_xlim(1e-4, 1e-2)
    ax.grid(which='minor')
    ax.grid(which='major', color='black')

    fig.set_size_inches(10, 10)
    if args.out is not None:
        fig.savefig(args.out, bbox_inches='tight', dpi=200)
    if args.show:
        plt.show()


if __name__ == '__main__':
    main()
